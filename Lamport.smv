MODULE main
  VAR
	timestamp: array 0..1 of -1 .. 2;
	request  : array 0..1 of boolean;
	reply	 : array 0..1 of boolean;
	proc0    : process CS(timestamp,request,reply,0);
	proc1    : process CS(timestamp,request,reply,1);
  ASSIGN
	init(timestamp[0]) := -1;
	init(timestamp[1]) := -1;
	init(request[0]) := FALSE;
	init(request[1]) := FALSE;
	init(reply[0]) := FALSE;
	init(reply[1]) := FALSE;
	SPEC AG !(proc0.state = cs & proc1.state =cs)
	SPEC AG (proc0.state=wait -> AF proc0.state=cs)
MODULE CS(timestamp,request,reply,i)
  VAR
       state : {free,req,rep,cs,wait};
       
  DEFINE
  j := case
     i = 0 : 1;
     i = 1 : 0; 
  esac;    
            
  ASSIGN
       init(state):= free;
       
       next(timestamp[i]) := case
       	state=free & (timestamp[i] = -1 ) &  (timestamp[j] = -1 ): 0;
       	state = free & (timestamp[i] = -1 ) & (timestamp[j]<2): timestamp[j]+1;
       	state = req & (timestamp[j] = 2) : 1;	
       	state = rep & (timestamp[i] = 2) & (timestamp[j] = 1) : 0;
       	TRUE : timestamp[i];
      esac;
      
      next(request[i]) := case
		request[j]!=TRUE :TRUE;
		TRUE:request[i];
      esac;
      
      next(reply[i]) := case
		request[j]=TRUE & reply[i]=FALSE:TRUE;
		TRUE:request[i];
      esac;

      next(state):= case
              state=free & (request[i] = TRUE) : req;
              state=free & (request[j] = TRUE) : rep;
              state = free & (timestamp[i]<timestamp[j])  & (reply[j]=TRUE) :wait;
              state = wait & (timestamp[i]<timestamp[j]): cs;
              state=  cs  : {cs, req};
              TRUE : state;
      esac;
